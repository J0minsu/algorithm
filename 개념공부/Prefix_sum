어떠한 배열에서 일정 구간의 합을 구하는 경우,
 가장 먼저 떠올려 볼 가치가 있는 알고리즘.
  정렬 및 탐색으로 대부분 해결 가능하지만 투 포인터를 사용하면 퍼포먼스 향상 가능
   prefix_sum 은 접두사의 합을 이용하는 알고리즘.
   
    사용하기 위해서는 처음부터 주어진 배열 A[n]에 대해 해당 인덱스까지의 합을 담는 prefixSum 의 P[n+1]를 선언 후
    (단,P[0] = 0) 
     구간의 시작과 끝을 나타내는 left, right index의 값이 주어진다면 P[right] - P[left-1] 값을 구하면 된다.
  
  ex) 배열 A[N] 에서 left = 2, right = 4 일 때, 구간 합을 반환하시오.
  
        public class Main {
            public static void main(String args[]) {
              int left = 2; //구간의 시작
              int right = 4; //구간의 끝
              int [] array = {1, 2, 3, 2, 5}; //주어진 정수배열

              System.out.println(solution(left, right, array));
            }

            public static int solution(int left, int right, int [] array) {

                int sum = 0; //prefix array에 들어갈 수를 구할 변수

                int [] prefixSum = new int [array.length + 1]; // P[0]에 0이 들어가야하기 때문에 +1
                prefixSum[0] = 0;

                for(int number = 0; number < array.length; number++) {
                    sum += array[number];
                    prefixSum[number + 1] = sum;
                }


                return prefixSum[right] - prefixSum[left-1];
            }
        }
      
      위의 예 에서는 O(2N) 의 시간복잡도에서 O(N+M) 으로 퍼포먼스의 향상을 이끌어 낼 수 있었음.
