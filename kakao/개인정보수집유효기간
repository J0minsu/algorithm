
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.*;
import java.util.stream.IntStream;

public class 개인정보수집유효기간 {

    public static void main(String[] args) {


        int[] solution = solution("2022.05.19", new String[]{"A 6", "B 12", "C 3"}, new String[]{"2021.05.02 A", "2021.07.01 B", "2022.02.19 C", "2022.02.20 C"});

        for (int i = 0; i < solution.length; i++) {
            System.out.println("i = " + solution[i]);
        }

    }

    static DateTimeFormatter FORMAT = DateTimeFormatter.ofPattern("yyyy.MM.dd");

    public static int[] solution(String today, String[] terms, String[] privacies) {

        LocalDate todayDate = parseToDate(today);

        Map<String, Integer> termMap = new HashMap<>();

        for (String term : terms) {
            String[] split = term.split(" ");
            termMap.put(split[0], Integer.valueOf(split[1]));
        }

        int[] result = IntStream.range(0, privacies.length)
                .boxed()
                .map(i -> {
                    String privacy = privacies[i];

                    String[] split = privacy.split(" ");
                    LocalDate agreeDate = parseToDate(split[0]);
                    String termType = split[1];

                    return new Term(i + 1, termType, agreeDate, plusMonth(agreeDate, termMap.get(termType)));

                })
                .filter(i -> i.isExpired(todayDate))
                .mapToInt(Term::getIndex)
                .toArray();

        return result;
    }

    private static LocalDate parseToDate(String today) {
        return LocalDate.parse(today, FORMAT);
    }

    private static LocalDate plusMonth(LocalDate localDate, int month) {

        LocalDate target = localDate.plusMonths(month).minusDays(1);

        if(target.getDayOfMonth() >= 29) {
            int diff = Math.abs(28 - target.getDayOfMonth());
            target = target.minusDays(diff);
        }

        return target;
    }

    static class Term {

        int index;
        String term;
        LocalDate agreeDate;
        LocalDate expiredDate;

        public Term(int index, String term, LocalDate agreeDate, LocalDate expiredDate) {
            this.index = index;
            this.term = term;
            this.agreeDate = agreeDate;
            this.expiredDate = expiredDate;
        }

        public int getIndex() {
            return index;
        }

        public boolean isExpired(LocalDate now) {

            System.out.println("now = " + now);
            System.out.println("expiredDate = " + expiredDate);

            return now.isAfter(expiredDate);
        }

    }

}
